match(data$Huoneisto, sauna)
data$Huoneisto %in% sauna
as.character(data$Huoneisto) %in% sauna
sum(as.character(data$Huoneisto) %in% sauna)
sum(match(as.character(data$Huoneisto), sauna))
grepl("+s", data$Huoneisto)
sum(grepl("+s", data$Huoneisto))
sauna <- c("+s")
sum(data$Huoneisto %in% sauna)
str(data)
sum(as.character(data$Huoneisto) %in% sauna)
test <- as.character(data$Huoneisto)
sum(test %in% sauna)
sum(pmatch(test, sauna))
sum(pmatch(test, sauna, nomatch=0))
grep("+s|,s", data$Huoneisto)
grepl("+s|,s", data$Huoneisto)
sum(grepl("+s|,s", data$Huoneisto))
sum(grepl("+s|,s|, s", data$Huoneisto))
sum(grepl("\+s", data$Huoneisto))
sum(grepl("\\+s", data$Huoneisto))
sum(grepl("\\+s|\\,s", data$Huoneisto))
sum(grepl("\\+s|\\,s|\\, s", data$Huoneisto))
sum(grepl("\\+s|\\,s|\\, s|sauna", data$Huoneisto))
sum(grepl("\\+s|\\,s|\\, s|(sauna&!saunaosasto)", data$Huoneisto))
sum(grepl("\\+s|\\,s|\\, s|sauna", data$Huoneisto))
data$Sauna <- if (grepl("\\+s|\\,s|\\, s|sauna", data$Huoneisto)) 1 else 0
grepl("\\+s|\\,s|\\, s|sauna", data$Huoneisto)
View(data)
data$Sauna <- ifelse(grepl("\\+s|\\,s|\\, s|sauna", data$Huoneisto), 1, 0)
View(data)
data$Parveke <- ifelse(grepl("\\+p|\\,p|\\, p|parveke", data$Huoneisto), 1, 0)
View(data)
data$Sauna <- ifelse(grepl("\\+s|\\,s|\\, s|sauna", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Parveke <- ifelse(grepl("\\+p|\\,p|\\, p|parv", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Sauna <- if (grepl("saunaosasto", data$Huoneisto) 0
?if
data$Sauna[grepl("saunaosasto", data$Huoneisto)] <- 0
data$Parveke[grepl("piha", data$Huoneisto)] <- 0
View(data)
data$Sauna[grepl("saunaosasto", data$Huoneisto, ignore.case = TRUE)] <- 0
data$Parveke[grepl("piha", data$Huoneisto, ignore.case = TRUE)] <- 0
data$Sauna <- ifelse(grepl("\\+s|\\+ s|\\,s|\\, s|sauna", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Sauna[grepl("saunaosasto", data$Huoneisto, ignore.case = TRUE)] <- 0
data$Sauna <- ifelse(grepl("\\+s|\\+ s|\\,s|\\, s|sauna", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Sauna[grepl("saunaosasto", data$Huoneisto, ignore.case = TRUE)] <- 0
data$Parveke <- ifelse(grepl("\\+p|\\+ p|\\,p|\\, p|parv", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Parveke[grepl("piha", data$Huoneisto, ignore.case = TRUE)] <- 0
View(data)
ifelse(data$Hissi=="on", 1, 0)
data$Hissi <- ifelse(data$Hissi=="on", 1, 0)
View(data)
summary(data)
library(dplyr)
?mutate
data$Kunto[data$Kunto == "hyvä"]
data$Kunto[data$Kunto == "huono"] <- 0
View(data)
levels(data$Kunto)
levels(data$Kunto) <- c("1", "2", "3")
levels(data$Kunto) <- c("1", "2", "3", "4")
library(XML)
library(data.table)
library(dplyr)
data <- data.table(matrix(ncol=11, nrow=0))
columns <- c("Kaupunginosa", "Huoneisto", "Talotyyppi", "m2", "Hinta", "e/m2", "Vuosi", "Kerros", "Hissi", "Kunto", "E.luokka")
setnames(data, columns)
for (page in 1:100) {
cat(paste(page, ""))
url <- paste("http://asuntojen.hintatiedot.fi/haku/?c=Helsinki&search=1&z=", as.character(page), sep = "")
html <- htmlParse(url)
table <- getNodeSet(html, "//table/tbody[3]")
rows <- xmlApply(table[[1]], function(x) xmlSApply(x, xmlValue))
if (length(rows) < 2) {
break
}
rows <- rows[unlist(lapply(rows, function(x) length(x)==22))]
rows <- lapply(rows, function(x) x[grepl("td", names(x))])
result <- do.call(rbind.data.frame, rows)
setnames(result, columns)
data <- rbind(data, result)
}
backup <- data
data$Sauna <- ifelse(grepl("\\+s|\\+ s|\\,s|\\, s|sauna", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Sauna[grepl("saunaosasto", data$Huoneisto, ignore.case = TRUE)] <- 0
data$Parveke <- ifelse(grepl("\\+p|\\+ p|\\,p|\\, p|parv", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Parveke[grepl("piha", data$Huoneisto, ignore.case = TRUE)] <- 0
levels(data$Hissi)
levels(data$Hissi) <- c("0", "1")
levels(data$Hissi)
View(backup)
View(data)
levels(data$Kunto)
data$Hissi <- ifelse(data$Hissi=="on", 1,0)
data$Kunto[which(data$Kunto == "hyvä")]
data$Kunto[which(data$Kunto == "huono")] <- "0"
data <- backup
levels(data$Kunto)
levels(data$Kunto)[levels(data$Kunto) == "hyvä"]
levels(data$Kunto)[levels(data$Kunto) == "huono"] <- "0"
levels(data$Kunto)[levels(data$Kunto) == "tyyd."] <- "1"
levels(data$Kunto)[levels(data$Kunto) == "hyvä"] <- "2"
View(data)
data$Hissi <- ifelse(data$Hissi=="on", "1","0")
View(data)
head(data)
head(data, n = 20)
?split
strsplit(data$Kerros, "/")
strsplit(data$Kerros, "\\/")
strsplit(as.character(data$Kerros), "\\/")
strsplit(as.character(data$Kerros), "\\/")[[]][1]
strsplit(as.character(data$Kerros), "\\/")[1]
strsplit(as.character(data$Kerros), "\\/")[1][1]
strsplit(as.character(data$Kerros), "\\/")[[1]][1]
floors <- strsplit(as.character(data$Kerros), "\\/")[[1]][1]
lapply(floors, function(x) x[1])
floors <- strsplit(as.character(data$Kerros), "\\/")
lapply(floors, function(x) x[1])
unlist(lapply(floors, function(x) x[1]))
data$Kerros <- unlist(lapply(floors, function(x) x[1]))
View(data)
data$Max.kerros <- unlist(lapply(floors, function(x) x[2]))
View(data)
data <- backup
data$Sauna <- ifelse(grepl("\\+s|\\+ s|\\,s|\\, s|sauna", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Sauna[grepl("saunaosasto", data$Huoneisto, ignore.case = TRUE)] <- 0
data$Parveke <- ifelse(grepl("\\+p|\\+ p|\\,p|\\, p|parv", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Parveke[grepl("piha", data$Huoneisto, ignore.case = TRUE)] <- 0
data$Hissi <- ifelse(data$Hissi=="on", "1","0")
levels(data$Kunto)[levels(data$Kunto) == "huono"] <- "0"
levels(data$Kunto)[levels(data$Kunto) == "tyyd."] <- "1"
levels(data$Kunto)[levels(data$Kunto) == "hyvä"] <- "2"
floors <- strsplit(as.character(data$Kerros), "\\/")
data$Asuinkerros <- unlist(lapply(floors, function(x) x[1]))
data$Max.kerros <- unlist(lapply(floors, function(x) x[2]))
View(data)
data$Rel.kerros <- ifelse(as.numeric(data$Asuinkerros) > 0, as.numeric(data$Asuinkerros) / as.numeric(data$Max.kerros)), "")
data$Rel.kerros <- ifelse(as.numeric(data$Asuinkerros) > 0, as.numeric(data$Asuinkerros) / as.numeric(data$Max.kerros), "")
View(data)
data$Rel.kerros <- ifelse(!is.na(data$Max.kerros), as.numeric(data$Asuinkerros) / as.numeric(data$Max.kerros), "")
is.na(data$Max.kerros)
!is.na(data$Max.kerros)
data$Rel.kerros <- ifelse(!is.na(data$Max.kerros), as.numeric(data$Asuinkerros) / as.numeric(data$Max.kerros), "")
View(data)
data$Kerros[13]
data$Kerros[12]
data$Kerros[13]
data$Kerros == ""
as.character(data$Kerros) == ""
as.character(is.na(data$Kerros))
is.na(as.character(data$Kerros))
as.character(data$Kerros[13])
as.character(data$Kerros) == " "
char <- as.character(data$Kerros[13])
as.character(data$Kerros[13]) == char
as.character(data$Kerros) == char
as.character(data$Kerros) == " "
length(data$Kerros)
length(data$Kerros[])
length(as.character(data$Kerros))
lapply(data$Kerros, function(x) {
if (length(x) < 2) {
x <- ""
}
})
View(data)
lapply(data$Kerros, function(x) {
#    if (length(x) < 2) {
#        x <- ""
#    }
length(as.character(x))
})
apply(data$Kerros, function(x) {
#    if (length(x) < 2) {
#        x <- ""
#    }
length(as.character(x))
})
?apply
sapply(data$Kerros, function(x) {
#    if (length(x) < 2) {
#        x <- ""
#    }
length(as.character(x))
})
sapply(data$Kerros, function(x) {
#    if (length(x) < 2) {
#        x <- ""
#    }
cat(as.character(x))
#    length(as.character(x))
})
str(data$Kerros)
sapply(as.character(data$Kerros), function(x) {
#    if (length(x) < 2) {
#        x <- ""
#    }
cat(x)
#    length(as.character(x))
})
sapply(as.character(data$Kerros), function(x) {
#    if (length(x) < 2) {
#        x <- ""
#    }
x
#    length(as.character(x))
})
sapply(as.character(data$Kerros), function(x) {
if (length(x) < 2) {
x <- ""
}
})
data$Kerros <- sapply(as.character(data$Kerros), function(x) {
if (length(x) < 2) {
x <- ""
}
})
View(data)
data <- backup
data$Sauna <- ifelse(grepl("\\+s|\\+ s|\\,s|\\, s|sauna", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Sauna[grepl("saunaosasto", data$Huoneisto, ignore.case = TRUE)] <- 0
data$Parveke <- ifelse(grepl("\\+p|\\+ p|\\,p|\\, p|parv", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Parveke[grepl("piha", data$Huoneisto, ignore.case = TRUE)] <- 0
data$Hissi <- ifelse(data$Hissi=="on", "1","0")
levels(data$Kunto)[levels(data$Kunto) == "huono"] <- "0"
levels(data$Kunto)[levels(data$Kunto) == "tyyd."] <- "1"
levels(data$Kunto)[levels(data$Kunto) == "hyvä"] <- "2"
data$Kerros[length(as.character(data$Kerros) < 2]
data$Kerros[length(as.character(data$Kerros)) < 2]
data$Kerros <- as.character(data$Kerros)
str(data$Kerros)
View(data)
data$Kerros[length(data$Kerros) < 2]
sapply(data$Kerros, function(x) length(x))
nchar(data$Kerros)
data$Kerros[nchar(data$Kerros) < 2]
data$Kerros[nchar(data$Kerros) == 1]
View(data)
sapply(data$Kerros, function(x) nchar(x))
data$pituus <- sapply(data$Kerros, function(x) nchar(x))
View(data)
data$pituus <- sapply(data$Kerros, function(x) {
if (nchar(x)) < 2) x <- ""
}
data$pituus <- sapply(data$Kerros, function(x) {
if (nchar(x)) < 2) {
x <- ""
}
}
data$pituus <- sapply(data$Kerros, function(x) {
if (nchar(x)) < 2) {
x <- ""
}
})
data$pituus <- sapply(data$Kerros, function(x) {
if (nchar(x) < 2) {
x <- ""
}
})
View(data)
data$pituus <- sapply(data$Kerros, function(x) {
if (nchar(x) < 2) {
x <- ""
} else {
x
}
})
View(data)
data$Kerros[13]
data$Kerros[13] == " "
data$Kerros <- as.character(data$Kerros)
data$Kerros <- sapply(data$Kerros, function(x) {
if (nchar(x) < 2) {
x <- ""
} else {
x
}
})
View(data)
floors <- strsplit(as.character(data$Kerros), "\\/")
data$Asuinkerros <- unlist(lapply(floors, function(x) x[1]))
data$Max.kerros <- unlist(lapply(floors, function(x) x[2]))
data$Rel.kerros <- ifelse(!is.na(data$Max.kerros), as.numeric(data$Asuinkerros) / as.numeric(data$Max.kerros), "")
View(data)
ifelse(nchar(data$Kerros) < 2, "", data$Kerros)
data$Kerros <- as.character(data$Kerros)
data$Kerros <- ifelse(nchar(data$Kerros) < 2, "", data$Kerros)
data <- backup
data$Sauna <- ifelse(grepl("\\+s|\\+ s|\\,s|\\, s|sauna", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Sauna[grepl("saunaosasto", data$Huoneisto, ignore.case = TRUE)] <- 0
data$Parveke <- ifelse(grepl("\\+p|\\+ p|\\,p|\\, p|parv", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Parveke[grepl("piha", data$Huoneisto, ignore.case = TRUE)] <- 0
data$Hissi <- ifelse(data$Hissi=="on", "1","0")
levels(data$Kunto)[levels(data$Kunto) == "huono"] <- "0"
levels(data$Kunto)[levels(data$Kunto) == "tyyd."] <- "1"
levels(data$Kunto)[levels(data$Kunto) == "hyvä"] <- "2"
data$Kerros <- as.character(data$Kerros)
data$Kerros <- ifelse(nchar(data$Kerros) < 2, "", data$Kerros)
floors <- strsplit(as.character(data$Kerros), "\\/")
data$Asuinkerros <- unlist(lapply(floors, function(x) x[1]))
data$Max.kerros <- unlist(lapply(floors, function(x) x[2]))
data$Rel.kerros <- ifelse(!is.na(data$Max.kerros), as.numeric(data$Asuinkerros) / as.numeric(data$Max.kerros), "")
View(data)
gsub(",", ".", data$m2)
as.numeric(gsub(",", ".", data$m2))
data$m2 <- as.numeric(gsub(",", ".", data$m2))
View(data)
data$Hinta <- as.numeric(data$Hinta)
data$e/m2 <- NULL
columns <- c("Kaupunginosa", "Huoneisto", "Talotyyppi", "m2", "Hinta", "e.m2", "Vuosi", "Kerros", "Hissi", "Kunto", "E.luokka")
setnames(data, columns)
data[,6] <- NULL
data$Vuosi <- as.numeric(data$Vuosi)
data$Kerros <- NULL
View(data)
library(XML)
library(data.table)
library(dplyr)
data <- data.table(matrix(ncol=11, nrow=0))
columns <- c("Kaupunginosa", "Huoneisto", "Talotyyppi", "m2", "Hinta", "e.m2", "Vuosi", "Kerros", "Hissi", "Kunto", "E.luokka")
setnames(data, columns)
for (page in 1:100) {
cat(paste(page, ""))
url <- paste("http://asuntojen.hintatiedot.fi/haku/?c=Helsinki&search=1&z=", as.character(page), sep = "")
html <- htmlParse(url)
table <- getNodeSet(html, "//table/tbody[3]")
rows <- xmlApply(table[[1]], function(x) xmlSApply(x, xmlValue))
if (length(rows) < 2) {
break
}
rows <- rows[unlist(lapply(rows, function(x) length(x)==22))]
rows <- lapply(rows, function(x) x[grepl("td", names(x))])
result <- do.call(rbind.data.frame, rows)
setnames(result, columns)
data <- rbind(data, result)
}
backup <- data
data <- backup
data$Sauna <- ifelse(grepl("\\+s|\\+ s|\\,s|\\, s|sauna", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Sauna[grepl("saunaosasto", data$Huoneisto, ignore.case = TRUE)] <- 0
data$Parveke <- ifelse(grepl("\\+p|\\+ p|\\,p|\\, p|parv", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Parveke[grepl("piha", data$Huoneisto, ignore.case = TRUE)] <- 0
data$Hissi <- ifelse(data$Hissi=="on", "1","0")
levels(data$Kunto)[levels(data$Kunto) == "huono"] <- "0"
levels(data$Kunto)[levels(data$Kunto) == "tyyd."] <- "1"
levels(data$Kunto)[levels(data$Kunto) == "hyvä"] <- "2"
data$Kerros <- as.character(data$Kerros)
data$Kerros <- ifelse(nchar(data$Kerros) < 2, "", data$Kerros)
floors <- strsplit(as.character(data$Kerros), "\\/")
data$Asuinkerros <- unlist(lapply(floors, function(x) x[1]))
data$Max.kerros <- unlist(lapply(floors, function(x) x[2]))
data$Rel.kerros <- ifelse(!is.na(data$Max.kerros), as.numeric(data$Asuinkerros) / as.numeric(data$Max.kerros), "")
data$m2 <- as.numeric(gsub(",", ".", data$m2))
data$Hinta <- as.numeric(as.character(data$Hinta))
data$Vuosi <- as.numeric(as.character(data$Vuosi))
data$e.m2 <- NULL
data$Kerros <- NULL
data$E.luokka <- NULL
View(data)
summary(data)
complete.cases(data)
na.omit(data)
data <- na.omit(data)
View(data)
data$Kunto <- as.numeric(data$Kunto)
View(data)
data <- backup
data$Sauna <- ifelse(grepl("\\+s|\\+ s|\\,s|\\, s|sauna", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Sauna[grepl("saunaosasto", data$Huoneisto, ignore.case = TRUE)] <- 0
data$Parveke <- ifelse(grepl("\\+p|\\+ p|\\,p|\\, p|parv", data$Huoneisto, ignore.case = TRUE), 1, 0)
data$Parveke[grepl("piha", data$Huoneisto, ignore.case = TRUE)] <- 0
data$Hissi <- ifelse(data$Hissi=="on", "1","0")
levels(data$Kunto)[levels(data$Kunto) == "huono"] <- "0"
levels(data$Kunto)[levels(data$Kunto) == "tyyd."] <- "1"
levels(data$Kunto)[levels(data$Kunto) == "hyvä"] <- "2"
data$Kunto == " "
gsub(" ", "", data$Kunto)
?rnorm
90_upper <- 200
upper <- 200
lower <- 50
values <- rnorm(100, mean=(upper + lower / 2), sd = ((upper - lower)/3.29)
values <- rnorm(100, mean=(upper + lower / 2), sd = ((upper - lower)/3.29))
hist(values)
values
values <- round(rnorm(1000, mean=(upper + lower / 2), sd = ((upper - lower)/3.29)))
hist(values)
mean(values)
values <- round(rnorm(1000, mean=((upper + lower) / 2), sd = ((upper - lower)/3.29)))
hist(values)
mean(values)
values <- round(rnorm(10000, mean=((upper + lower) / 2), sd = ((upper - lower)/3.29)))
hist(values)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x, w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~0+x)
lm(y~1+x)
library(datasets)
data(mtcars)
lm(mtcars$mpg ~ mtcars$wt)
plot(mtcars$wt, mtcars$mpg)
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
fit
fit2 <- lm(y~1)
fit2
summary(fit)
summary(fit2)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
hatvalues(fit)
?hatvalues
?influence.measures
plot(hatvalues(fit), type = "h")
hat(fit)
hat(x, y)
dfbetas(fit)
?shuttle
library(MASS)
?shuttle
data(shuttle)
View(shuttle)
shuttle$usenum <- as.numeric(shuttle$use == "auto")
shuttle$windnum <- as.numeric(shuttle$wind == "head")
fit <- glm(usenum ~ windnum, data=shuttle, family = "binomial")
summary(fit)
exp(-0.03181)
shuttle$magnfac <- as.factor(shuttle$magn)
View(shuttle)
str(shuttle)
fit2 <- glm(usenum ~ windnum + magn, family="binomial")
fit2 <- glm(usenum ~ windnum + magn, data=shuttle, family="binomial")
summary(fit2)
exp(-3.201e-02)
shuttle$usenumrev <- 1 - shuttle$usenum
fit3 <- glm(usenumrev ~ windnum, data=shuttle, family = "binomial")
summary(fit3)
summary(fit)
data(InsectSprays)
View(InsectSprays)
str(InsectSprays)
fit4 <- glm(count ~ spray, data=InsectSprays, family = "poisson")
summary(fit4)
fit5 <- glm(count ~ relevel(spray,"B"), data=InsectSprays, family="poisson")
summary(fit5)
exp(-0.05588)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x, y)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
View(splineTerms)
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
yhat[0]
yhat
yhat[1]
yhat[6]
yhat[7]
yhat[7] - yhat[6]
yhat[8] - yhat[7]
install.packages("rattle")
library(rattle)
rattle()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
library(devtools)
install.packages(devtools)
install.packages("devtools")
library(devtools)
install_github('rCharts', 'ramnathv')
remove.packages(RCurl)
remove.packages("RCurl")
install_github('rCharts', 'ramnathv')
install.packages("RCurl")
install.packages("RCurl")
install_github('rCharts', 'ramnathv')
library(devtools)
install.packages("Rcpp")
library(devtools)
install.packages("Rtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
remove.packages("stringr")
install.packages("stringr")
install.packages("stringr")
library(slidify)
library(slidify)
setwd("C:/Coursera/09. Developing Data Products/ApartmentPricePredictor")
author("ApartmentPricePredictor")
setwd("C:/Coursera/09. Developing Data Products/ApartmentPricePredictor/ApartmentPricePredictor")
setwd("C:/Coursera/09. Developing Data Products/ApartmentPricePredictor/Slides")
